---
  - name: Test Tower API Resources methods
    hosts: localhost
    gather_facts: no
    connection: local
 
    vars:
      tower_hostname: "10.0.0.12"
      test_host_address: "10.0.0.39"
 
    tasks:

      - name: Include Vault file
        include_vars: mycreds.yml

      - name: Generate Api token
        uri:
          url: "https://{{ tower_hostname }}/api/v2/users/1/tokens/"
          method: POST
          force_basic_auth: yes
          body_format: json
          headers:
            Content-Type: application/json
          body: '{"description": "API token" ,"application": null, "scope": "write"}'
          url_username: "{{ admin_username }}"
          url_password: "{{ admin_password }}"
          return_content: yes
          status_code: 201
          validate_certs: no
        register: token_json
      
      - name: Get token
        set_fact:
          tower_api_token: "{{ token_json | json_query('json.token') }}"

      - name: Update license
        uri:
          url: "https://{{ tower_hostname }}/api/v2/config/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: "{{ license }}"
          return_content: yes
          status_code: 200 # He conseguido instalar la licencia pero devuelve 200 en lugar de 201 como pone en la docu
          validate_certs: no

      - name: Create machine credentials
        uri:
          url: "https://{{ tower_hostname }}/api/v2/credentials/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"credential_type": 1, "user": 1, "name":"Vagrant", "kind": "ssh", "username":"{{ machine_user }}", "password": "{{ machine_password }}", "become_method": "sudo"}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: credentials
      
      - name: Get credential ID
        set_fact:
          credential_id: "{{ credentials | json_query('json.id') }}"
      
      - name: Create Organization
        uri:
          url: "https://{{ tower_hostname }}/api/v2/organizations/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"description": "Created for show the api power.","name": "API Corporation"}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: organization

      - name: Get organization ID
        set_fact:
          organization_id: "{{ organization | json_query('json.id') }}"

      - name: Create Inventory
        uri:
          url: "https://{{ tower_hostname }}/api/v2/inventories/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"name": "Inventory created using the Tower API.","organization": "{{ organization_id }}"}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: inventory

      - name: Get inventory ID
        set_fact:
          inventory_id: "{{ inventory | json_query('json.id') }}"

      - name: Create group
        uri:
          url: "https://{{ tower_hostname }}/api/v2/inventories/{{ inventory_id }}/groups/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"name": "API_GROUP", "description": "Group created using the Tower API."}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: group

      - name: Get group ID
        set_fact:
          group_id: "{{ group | json_query('json.id') }}"

      - name: Create host
        uri:
          url: "https://{{ tower_hostname }}/api/v2/groups/{{ group_id }}/hosts/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"name": "{{ test_host_address }}", "description": "Host created using the Tower API."}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: host

      - name: Get host ID
        set_fact:
          host_id: "{{ host | json_query('json.id') }}"

      - name: Create user
        uri:
          url: "https://{{ tower_hostname }}/api/v2/users/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"username": "{{ tower_username }}", "first_name": "Api", "last_name": "created user", "is_superuser": false, "password": "{{ tower_password }}", "email": "a@a.com" }'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: user

      - name: Get user ID
        set_fact:
          user_id: "{{ user | json_query('json.id') }}"

      - name: Get inventory admin role ID
        set_fact:
          admin_role_id: "{{ inventory | json_query('json.summary_fields.object_roles.admin_role.id')}}"

      - name: Grant admin role to the new user
        uri:
          url: "https://{{ tower_hostname }}/api/v2/users/{{ user_id }}/roles/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"id": {{ admin_role_id }} }'
          return_content: yes
          status_code: 204  # He conseguido instalar la licencia pero devuelve 204 en lugar de 201 como pone en la docu
          validate_certs: no
        register: user

      - name: Create SCM credentials
        uri:
          url: "https://{{ tower_hostname }}/api/v2/credentials/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"credential_type":2, "user":1, "name":"SCM", "kind":"scm", "inputs": {"username":"{{ git_username }}", "password": "{{ git_password }}"}}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: scm_credentials
      
      - name: Get credential ID
        set_fact:
          scm_credential_id: "{{ scm_credentials | json_query('json.id')}}"

      - name: Create a project
        uri:
          url: "https://{{ tower_hostname }}/api/v2/organizations/{{ organization_id }}/projects/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"name":"API Project", "scm_type":"git", "scm_url":"https://github.com/zaskan/RedHatLabs.git", "credential":"{{ scm_credential_id }}", "scm_update_on_launch": true }'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: project

      - name: Get project ID
        set_fact:
          project_id: "{{ project | json_query('json.id')}}"

      - name: Get project status
        uri:
          url: "https://{{ tower_hostname }}/api/v2/projects/{{ project_id }}/"
          method: GET
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          return_content: yes
          status_code: 200
          validate_certs: no
        register: project_status
        until: project_status | json_query('json.status') == "successful"
        retries: 10
        delay: 20

      - name: Create a template
        uri:
          url: "https://{{ tower_hostname }}/api/v2/job_templates/"
          method: POST
          force_basic_auth: no
          body_format: json
          headers:
            Content-Type: application/json
            Authorization: Bearer {{ tower_api_token }}
          body: '{"project": {{ project_id }}, "playbook": "hello_world.yml", "inventory": {{ inventory_id }},  "name": "API created template"}'
          return_content: yes
          status_code: 201
          validate_certs: no
        register: template

      - name: Get template ID
        set_fact:
          project_id: "{{ template | json_query('json.id')}}"

      - name: Show created facts
        debug:
          msg: "Credential:{{ credential_id }} Organization:{{ organization_id }} inventory:{{ inventory_id }} group_id:{{ inventory_id }}"

