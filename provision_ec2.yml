---
  - name: Provision on EC2
    hosts: localhost
    tags: provision
 
    vars:
      instance_type: t2.micro
      security_group: rafanch_sec_group
      image: ami-8cff51fb
      keypair: rafsanch
      region: eu-west-1
      subnet: subnet-459a9231
      tag_name: ansible_engine_test
      ec2_count: 1
      aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
      aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
 
    tasks:
 
      - name: Create a security group
        ec2_group:
          name: "{{ security_group }}"
          description: Security Group for ansible_engine_test Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
 
      - name: Launch the EC2 Instances
        ec2:
          group: "{{ security_group }}"
          instance_type: "{{ instance_type}}"
          image: "{{ image }}"
          assign_public_ip: yes
          vpc_subnet_id: "{{ subnet }}"
          wait: true
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          count: "{{ ec2_count }}"
        register: ec2
 
      - name: Show public ip
        debug:
          msg: "{{ item.public_ip }}"
        with_items: "{{ ec2.instances }}"
 
      # - name: Add the EC2 instance to the inventory
      #   lineinfile:
      #     dest: "./inventory"
      #     regexp: "{{ item.public_ip }}"
      #     insertafter: "[ansible_engine_test]"
      #     line: "{{ item.public_ip }}"
      #   with_items: "{{ ec2.instances }}"
  
      - name: Wait for SSH daemon to start
        wait_for:
          host: "{{ item.public_ip }}"
          port: 22
          state: started
        with_items: "{{ ec2.instances }}"
 
      - name: Tag instance
        ec2_tag:
          resource: "{{ item.id }}"
          region: "{{ region }}"
          state: present
          args:
            tags:
              Name: "{{ tag_name }}"
        with_items: "{{ ec2.instances }}"
        
      - name: Get info
        debug:
          msg: "{{ ec2.instances }}"
